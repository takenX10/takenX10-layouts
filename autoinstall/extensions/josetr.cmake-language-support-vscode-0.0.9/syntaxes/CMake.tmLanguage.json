{
  "fileTypes": [ "cmake", "CMakeLists.txt" ],
  "name": "CMake",
  "scopeName": "source.cmake",
  "patterns": [
    { "include": "#controlConditional" },
    { "include": "#controlLoop" },
    { "include": "#controlFlow" },
    { "include": "#control" },
    { "include": "#common" },
    { "include": "#builtInCommandIdentifier" },
    { "include": "#commandIdentifier" },
    { "include": "#unquoted" }
  ],
  "repository": {
    "common": {
      "patterns": [
        { "include": "#string" },
        { "include": "#bracketComment" },
        { "include": "#comment" },
        { "include": "#bracketArgument" },
        { "include": "#expression" }
      ]
    },
    "controlConditional": {
      "name": "keyword.control.conditional.cmake",
      "match": "\\b(?i:if|elseif|else|endif)\\b"
    },
    "controlLoop": {
      "name": "keyword.control.loop.cmake",
      "match": "\\b(?i:foreach|endforeach|while|endwhile|continue|break)\\b"
    },
    "controlFlow": {
      "name": "keyword.control.flow.cmake",
      "match": "\\b(?i:return)\\b"
    },
    "control": {
      "name": "keyword.control.cmake",
      "match": "\\b(?i:macro|endmacro|function|endfunction)\\b"
    },
    "builtInCommandIdentifier": {
      "name": "entity.name.function.cmake",
      "match": "\\b(?i:(cmake_host_system_information|cmake_language|cmake_minimum_required|cmake_parse_arguments|cmake_path|cmake_policy|configure_file|execute_process|file|find_file|find_library|find_package|find_path|find_program|get_cmake_property|get_directory_property|get_filename_component|get_property|if|include|include_guard|list|mark_as_advanced|math|message|option|return|separate_arguments|set|set_directory_properties|set_property|site_name|string|unset|variable_watch|add_compile_definitions|add_compile_options|add_custom_command|add_custom_target|add_definitions|add_dependencies|add_executable|add_library|add_link_options|add_subdirectory|add_test|aux_source_directory|build_command|create_test_sourcelist|define_property|enable_language|enable_testing|export|fltk_wrap_ui|get_source_file_property|get_target_property|get_test_property|include_directories|include_external_msproject|include_regular_expression|install|link_directories|link_libraries|load_cache|project|remove_definitions|set_source_files_properties|set_target_properties|set_tests_properties|source_group|target_compile_definitions|target_compile_features|target_compile_options|target_include_directories|target_link_directories|target_link_libraries|target_link_options|target_precompile_headers|target_sources|try_compile|try_run|ctest_build|ctest_configure|ctest_coverage|ctest_empty_binary_directory|ctest_memcheck|ctest_read_custom_files|ctest_run_script|ctest_sleep|ctest_start|ctest_submit|ctest_test|ctest_update|ctest_upload))\\b\\s*(?=\\(|$)"
    },
    "commandIdentifier": {
      "name": "command-identifier.cmake",
      "match": "\\b(?i:\\w+)\\b\\s*(?=\\(|$)"
    },
    "expression": {
      "name": "expression.group.cmake",
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": { "0": { "name": "punctuation.parenthesis.open.cmake" } },
      "endCaptures": { "0": { "name": "punctuation.parenthesis.close.cmake" } },
      "patterns": [
        { "include": "#common" },
        { "include": "#unquoted" }
      ]
    },
    "bracketComment": {
      "name": "comment.bracket-comment.cmake",
      "begin": "#\\[(=*)\\[",
      "beginCaptures": { "0": { "name": "punctuation.definition.comment.begin.cmake" } },
      "end": "\\]\\1\\]",
      "endCaptures": { "0": { "name": "punctuation.definition.comment.end.cmake" } }
    },
    "bracketArgument": {
      "name": "string.bracket-argument.cmake",
      "begin": "\\[(=*)\\[",
      "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.cmake" } },
      "end": "\\]\\1\\]",
      "endCaptures": { "0": { "name": "punctuation.definition.string.end.cmake" } }
    },
    "comment": {
      "name": "comment.cmake",
      "match": "#(.*)$",
      "captures": { "1": { "name": "comment-line.cmake" } }
    },
    "number": {
      "name": "constant.numeric.cmake",
      "match": "-?[\\d.]+$"
    },
    "boolean": {
      "name": "constant.language.boolean.cmake",
      "match": "(?i:TRUE|FALSE|ON|OFF|YES|NO)$"
    },
    "operator": {
      "name": "keyword.other.cmake",
      "match": "(NOT|AND|OR|LESS|GREATER|EQUAL|NOTEQUAL|LESS_EQUAL|GREATER_EQUAL|STRLESS|STRGREATER|STREQUAL|STREGREATER_EQUAL|VERSION_LESS|VERSION_GREATER|VERSION_EQUAL|VERSION_LES_EQUAL|VERSION_GREATER_EQUAL)$"
    },
    "reference": {
      "begin": "\\$(ENV|CACHE)?{",
      "beginCaptures": { "0": { "name": "punctuation.definition.template-expression.begin.cmake" } },
      "end": "}|(?=[^A-Za-z0-9\\\\$/_.+-])",
      "endCaptures": { "0": { "name": "punctuation.definition.template-expression.end.cmake" } },
      "patterns": [
        { "include": "#reference" },
        {
          "name": "variable.other.cmake",
          "match": "\\$|[A-Za-z0-9/_.+-]|\\\\."
        }
      ]
    },
    "string": {
      "name": "string.quoted.double.cmake",
      "begin": "\"",
      "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.cmake" } },
      "end": "\"",
      "endCaptures": { "0": { "name": "punctuation.definition.string.end.cmake" } },
      "patterns": [
        { "include": "#reference" },
        { "include": "#string-escape" }
      ]
    },
    "string-escape": {
      "name": "constant.character.escape.cmake",
      "match": "\\\\."
    },
    "unquoted-escape": {
      "name": "unquoted-escape.cmake",
      "match": "\\\\."
    },
    "generatorExpression": {
      "name": "keyword.preprocessor.generator-expression.cmake",
      "begin": "\\$\\<",
      "beginCaptures": { "0": { "name": "keyword.preprocessor.generator-expression.begin.cmake" } },
      "end": "[ \t()#\">\r\n]",
      "endCaptures": { "0": { "name": "keyword.preprocessor.generator-expression.end.cmake" } },
      "patterns": [
        { "include": "#generatorExpression" },
        { "include": "#reference" }
      ]
    },
    "unquoted": {
      "match": "(\\$\\([A-Za-z0-9_]*\\)|([^ \\t\\r\\n()#\\\\\"\\[=]|\\\\[^\\n])|=|\\[=*\\$\\([A-Za-z0-9_]*\\)|([^ \\t\\r\\n()#\\\\\"\\[=]|\\\\[^\\n])|\\\"(\\$\\([A-Za-z0-9_]*\\)|([^ \\t\\r\\n()#\\\\\"\\[=]|\\\\[^\\n])|[ \\t\\[=])*\\\")(\\$\\([A-Za-z0-9_]*\\)|([^ \\t\\r\\n()#\\\\\"\\[=]|\\\\[^\\n])|\\\"(\\$\\([A-Za-z0-9_]*\\)|([^ \\t\\r\\n()#\\\\\"\\[=]|\\\\[^\\n])|[ \\t\\[=])*\\\"|[\\[=])*",
      "captures": {
        "0": {
          "patterns": [
            { "include": "#boolean" },
            { "include": "#operator" },
            { "include": "#number" },
            {
              "match": "(?:[^ \\t\\r\\n\\(\\)#\\\\\"]|\\\\[^\\n])+$",
              "captures": {
                "0": {
                  "patterns": [
                    { "include": "#unquoted-escape" },
                    { "include": "#reference" },
                    { "include": "#generatorExpression" }
                  ]
                }
              }
            },
            {
              "match": ".+",
              "name": "string",
              "captures": {
                "0": {
                  "patterns": [
                    { "include": "#string-escape" },
                    { "include": "#reference" },
                    { "include": "#generatorExpression" }
                  ]
                }
              }
            }
          ]
        }
      }
    }
  }
}
