(()=>{var e={96:(e,t,n)=>{var i="Expected a function",o=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,a=/^0o[0-7]+$/i,c=parseInt,l="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,u="object"==typeof self&&self&&self.Object===Object&&self,d=l||u||Function("return this")(),f=Object.prototype.toString,g=Math.max,p=Math.min,v=function(){return d.Date.now()};function m(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function h(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==f.call(e)}(e))return NaN;if(m(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=m(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(o,"");var n=s.test(e);return n||a.test(e)?c(e.slice(2),n?2:8):r.test(e)?NaN:+e}e.exports=function(e,t,n){var o=!0,r=!0;if("function"!=typeof e)throw new TypeError(i);return m(n)&&(o="leading"in n?!!n.leading:o,r="trailing"in n?!!n.trailing:r),function(e,t,n){var o,r,s,a,c,l,u=0,d=!1,f=!1,w=!0;if("function"!=typeof e)throw new TypeError(i);function b(t){var n=o,i=r;return o=r=void 0,u=t,a=e.apply(i,n)}function y(e){return u=e,c=setTimeout(L,t),d?b(e):a}function E(e){var n=e-l;return void 0===l||n>=t||n<0||f&&e-u>=s}function L(){var e=v();if(E(e))return N(e);c=setTimeout(L,function(e){var n=t-(e-l);return f?p(n,s-(e-u)):n}(e))}function N(e){return c=void 0,w&&o?b(e):(o=r=void 0,a)}function M(){var e=v(),n=E(e);if(o=arguments,r=this,l=e,n){if(void 0===c)return y(l);if(f)return c=setTimeout(L,t),b(l)}return void 0===c&&(c=setTimeout(L,t)),a}return t=h(t)||0,m(n)&&(d=!!n.leading,s=(f="maxWait"in n)?g(h(n.maxWait)||0,t):s,w="trailing"in n?!!n.trailing:w),M.cancel=function(){void 0!==c&&clearTimeout(c),u=0,o=l=r=c=void 0},M.flush=function(){return void 0===c?a:N(v())},M}(e,t,{leading:o,maxWait:t,trailing:r})}},57:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ActiveLineMarker=void 0;const i=n(761);t.ActiveLineMarker=class{onDidChangeTextEditorSelection(e){const{previous:t}=(0,i.getElementsForSourceLine)(e);this._update(t&&t.element)}_update(e){this._unmarkActiveElement(this._current),this._markActiveElement(e),this._current=e}_unmarkActiveElement(e){e&&(e.className=e.className.replace(/\bcode-active-line\b/g,""))}_markActiveElement(e){e&&(e.className+=" code-active-line")}}},774:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.onceDocumentLoaded=void 0,t.onceDocumentLoaded=function(e){"loading"===document.readyState||"uninitialized"===document.readyState?document.addEventListener("DOMContentLoaded",e):e()}},608:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createPosterForVsCode=void 0;const i=n(414);t.createPosterForVsCode=e=>new class{postMessage(t,n){e.postMessage({type:t,source:(0,i.getSettings)().source,body:n})}}},761:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getEditorLineNumberForPageOffset=t.scrollToRevealSourceLine=t.getLineElementsAtPageOffset=t.getElementsForSourceLine=void 0;const i=n(414);function o(e){return 0,t=(0,i.getSettings)().lineCount-1,n=e,Math.min(t,Math.max(0,n));var t,n}const r=(()=>{let e;return()=>(e||(e=Array.prototype.map.call(document.querySelectorAll('div[class^="data-line-"], div[class*=" data-line-"]'),(e=>{const t=e.className.split(" ").pop().match(/data-line-(\d+)/)[1];return{element:e,line:parseInt(t)}})).filter((e=>!isNaN(e.line)))),e)})();function s(e){const t=Math.floor(e),n=r();let i=n[0]||null;for(const e of n){if(e.line===t)return{previous:e,next:void 0};if(e.line>t)return{previous:i,next:e};i=e}return{previous:i}}function a(e){const t=r(),n=e-window.scrollY;let i=-1,o=t.length-1;for(;i+1<o;){const e=Math.floor((i+o)/2),r=t[e].element.getBoundingClientRect();r.top+r.height>=n?o=e:i=e}const s=t[o],a=s.element.getBoundingClientRect();return o>=1&&a.top>n?{previous:t[i],next:s}:{previous:s}}t.getElementsForSourceLine=s,t.getLineElementsAtPageOffset=a,t.scrollToRevealSourceLine=function(e){const{previous:t,next:n}=s(e);if(t&&(0,i.getSettings)().scrollPreviewWithEditor){let i=0;const o=t.element.getBoundingClientRect().top;if(n&&n.line!==t.line){const r=(e-t.line)/(n.line-t.line),s=n.element.getBoundingClientRect().top-o;i=window.scrollY+o+r*s}else i=0===e?0:window.scrollY+o;window.scroll(0,Math.max(1,i))}},t.getEditorLineNumberForPageOffset=function(e){const{previous:t,next:n}=a(e);if(t){const i=t.element.getBoundingClientRect(),r=e-window.scrollY-i.top;if(n){const e=r/(n.element.getBoundingClientRect().top-i.top);return o(t.line+e*(n.line-t.line))}{const e=r/i.height;return o(t.line+e)}}return null}},414:(e,t)=>{"use strict";let n;function i(e){const t=document.getElementById("vscode-asciidoc-preview-data");if(t){const n=t.getAttribute(e);if(n)return JSON.parse(n)}throw new Error(`Could not load data for ${e}`)}Object.defineProperty(t,"__esModule",{value:!0}),t.getSettings=t.getData=void 0,t.getData=i,t.getSettings=function(){if(n)return n;if(n=i("data-settings"),n)return n;throw new Error("Could not load settings")}}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,n),r.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{"use strict";const e=n(57),t=n(774),i=n(608),o=n(761),r=n(414),s=n(96);let a=!0;const c=new e.ActiveLineMarker,l=(0,r.getSettings)(),u=acquireVsCodeApi(),d=(0,r.getData)("data-state");u.setState(d);const f=(0,i.createPosterForVsCode)(u);window.cspAlerter.setPoster(f),window.styleLoadingMonitor.setPoster(f),window.onload=()=>{p()},(0,t.onceDocumentLoaded)((()=>{l.scrollPreviewWithEditor&&setTimeout((()=>{const e=+l.line;isNaN(e)||(a=!0,(0,o.scrollToRevealSourceLine)(e))}),0)}));const g=(()=>{const e=s((e=>{a=!0,(0,o.scrollToRevealSourceLine)(e)}),50);return(t,n)=>{isNaN(t)||(n.line=t,e(t))}})(),p=s((()=>{const e=[],t=document.getElementsByTagName("img");if(t){let n;for(n=0;n<t.length;n++){const i=t[n];i.classList.contains("loading")&&i.classList.remove("loading"),e.push({id:i.id,height:i.height,width:i.width})}f.postMessage("cacheImageSizes",e)}}),50);window.addEventListener("resize",(()=>{a=!0,p()}),!0),window.addEventListener("message",(e=>{if(e.data.source===l.source)switch(e.data.type){case"onDidChangeTextEditorSelection":c.onDidChangeTextEditorSelection(e.data.line);break;case"updateView":g(e.data.line,l)}}),!1),document.addEventListener("dblclick",(e=>{if(!l.doubleClickToSwitchToEditor)return;for(let t=e.target;t;t=t.parentNode)if("A"===t.tagName)return;const t=e.pageY,n=(0,o.getEditorLineNumberForPageOffset)(t);"number"!=typeof n||isNaN(n)||f.postMessage("didClick",{line:Math.floor(n)})}));const v=["http:","https:","mailto:","vscode:","vscode-insiders:"];document.addEventListener("click",(e=>{if(!e)return;let t=e.target;for(;t;){if(t.tagName&&"A"===t.tagName&&t.href){if(t.getAttribute("href").startsWith("#"))return;let n=t.getAttribute("data-href");if(!n){if(v.some((e=>t.href.startsWith(e))))return;n=t.getAttribute("href")}return/^[a-z-]+:/i.test(n)?void 0:(f.postMessage("clickLink",{href:n}),e.preventDefault(),void e.stopPropagation())}t=t.parentNode}}),!0),l.scrollEditorWithPreview&&window.addEventListener("scroll",s((()=>{if(a)a=!1;else{const e=(0,o.getEditorLineNumberForPageOffset)(window.scrollY);0===window.scrollY?f.postMessage("revealLine",{line:0}):"number"!=typeof e||isNaN(e)||f.postMessage("revealLine",{line:e})}}),50))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,